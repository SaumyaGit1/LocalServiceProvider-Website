{"ast":null,"code":"var _jsxFileName = \"D:\\\\LocalizedServiceDiscovery\\\\front-end\\\\src\\\\BookingPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './BookingPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookingPage = () => {\n  _s();\n  const {\n    listingId\n  } = useParams(); // Assuming the route is /book/:listingId\n  const [listing, setListing] = useState(null);\n  const [slots, setSlots] = useState([]);\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  // In a real app, you would fetch the specific listing details\n  // For now, we'll just use the ID and fetch slots\n\n  useEffect(() => {\n    const fetchSlots = async () => {\n      // This is a placeholder, you'd fetch the listing to get the providerId\n      const providerId = 1; // You need to get this from the listing details\n      try {\n        const res = await fetch(`http://localhost:5000/api/bookings/slots/${providerId}`);\n        if (!res.ok) throw new Error('Failed to fetch slots');\n        const data = await res.json();\n        setSlots(data);\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    fetchSlots();\n  }, [listingId]);\n  const handleBooking = async () => {\n    if (!selectedSlot) return setError(\"Please select a time slot.\");\n    const token = localStorage.getItem('authToken');\n    if (!token) return navigate('/login');\n    try {\n      const providerId = 1; // Placeholder\n      const res = await fetch('http://localhost:5000/api/bookings/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          provider_id: providerId,\n          listing_id: listingId,\n          booking_time: selectedSlot\n        })\n      });\n      if (!res.ok) throw new Error('Failed to create booking.');\n      alert('Booking successful!');\n      navigate('/dashboard');\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"booking-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Book Your Service\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select an available time slot below.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slots-container\",\n      children: slots.map(slot => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `slot-btn ${selectedSlot === slot ? 'selected' : ''}`,\n        onClick: () => setSelectedSlot(slot),\n        children: formatDate(slot)\n      }, slot, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"form-button\",\n      onClick: handleBooking,\n      children: \"Confirm Booking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(BookingPage, \"7Muyiv+pqA2MnFNKGdbzuNfxTQ8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = BookingPage;\nexport default BookingPage;\nvar _c;\n$RefreshReg$(_c, \"BookingPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","BookingPage","_s","listingId","listing","setListing","slots","setSlots","selectedSlot","setSelectedSlot","error","setError","navigate","fetchSlots","providerId","res","fetch","ok","Error","data","json","err","message","handleBooking","token","localStorage","getItem","method","headers","body","JSON","stringify","provider_id","listing_id","booking_time","alert","formatDate","dateString","date","Date","toLocaleString","weekday","month","day","hour","minute","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","slot","onClick","_c","$RefreshReg$"],"sources":["D:/LocalizedServiceDiscovery/front-end/src/BookingPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './BookingPage.css';\r\n\r\nconst BookingPage = () => {\r\n    const { listingId } = useParams(); // Assuming the route is /book/:listingId\r\n    const [listing, setListing] = useState(null);\r\n    const [slots, setSlots] = useState([]);\r\n    const [selectedSlot, setSelectedSlot] = useState(null);\r\n    const [error, setError] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    // In a real app, you would fetch the specific listing details\r\n    // For now, we'll just use the ID and fetch slots\r\n    \r\n    useEffect(() => {\r\n        const fetchSlots = async () => {\r\n             // This is a placeholder, you'd fetch the listing to get the providerId\r\n            const providerId = 1; // You need to get this from the listing details\r\n            try {\r\n                const res = await fetch(`http://localhost:5000/api/bookings/slots/${providerId}`);\r\n                if (!res.ok) throw new Error('Failed to fetch slots');\r\n                const data = await res.json();\r\n                setSlots(data);\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        };\r\n        fetchSlots();\r\n    }, [listingId]);\r\n\r\n    const handleBooking = async () => {\r\n        if (!selectedSlot) return setError(\"Please select a time slot.\");\r\n         const token = localStorage.getItem('authToken');\r\n         if(!token) return navigate('/login');\r\n\r\n        try {\r\n             const providerId = 1; // Placeholder\r\n            const res = await fetch('http://localhost:5000/api/bookings/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({\r\n                    provider_id: providerId,\r\n                    listing_id: listingId,\r\n                    booking_time: selectedSlot\r\n                })\r\n            });\r\n            if (!res.ok) throw new Error('Failed to create booking.');\r\n            alert('Booking successful!');\r\n            navigate('/dashboard');\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n    \r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        return date.toLocaleString('en-US', { weekday: 'long', month: 'long', day: 'numeric', hour: 'numeric', minute: '2-digit' });\r\n    };\r\n\r\n    return (\r\n        <div className=\"booking-page\">\r\n            <h2>Book Your Service</h2>\r\n            <p>Select an available time slot below.</p>\r\n            <div className=\"slots-container\">\r\n                {slots.map(slot => (\r\n                    <button \r\n                        key={slot} \r\n                        className={`slot-btn ${selectedSlot === slot ? 'selected' : ''}`}\r\n                        onClick={() => setSelectedSlot(slot)}\r\n                    >\r\n                        {formatDate(slot)}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            <button className=\"form-button\" onClick={handleBooking}>Confirm Booking</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BookingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}