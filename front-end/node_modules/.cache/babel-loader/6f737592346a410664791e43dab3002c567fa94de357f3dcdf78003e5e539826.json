{"ast":null,"code":"var _jsxFileName = \"D:\\\\LocalizedServiceDiscovery\\\\front-end\\\\src\\\\BookingPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './BookingPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookingPage = () => {\n  _s();\n  const {\n    listingId\n  } = useParams();\n  const [listing, setListing] = useState(null);\n  const [slots, setSlots] = useState([]);\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Step 1: Fetch the details of the specific listing\n  useEffect(() => {\n    const fetchListingDetails = async () => {\n      try {\n        const res = await fetch(`http://localhost:5000/api/listings/${listingId}`);\n        if (!res.ok) throw new Error('Could not find this service listing.');\n        const data = await res.json();\n        setListing(data);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchListingDetails();\n  }, [listingId]);\n\n  // Step 2: Once we have the listing details, fetch the provider's available slots\n  useEffect(() => {\n    if (listing && listing.provider_id) {\n      const fetchSlots = async () => {\n        try {\n          const res = await fetch(`http://localhost:5000/api/bookings/slots/${listing.provider_id}`);\n          if (!res.ok) throw new Error('Failed to fetch available slots.');\n          const data = await res.json();\n          setSlots(data);\n        } catch (err) {\n          setError(err.message);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchSlots();\n    }\n  }, [listing]); // This effect runs when the 'listing' state changes\n\n  const handleBooking = async () => {\n    if (!selectedSlot) return setError(\"Please select a time slot to continue.\");\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      // Redirect to login if user is not authenticated\n      return navigate('/login');\n    }\n    try {\n      const res = await fetch('http://localhost:5000/api/bookings/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          provider_id: listing.provider_id,\n          listing_id: listing.id,\n          booking_time: selectedSlot\n        })\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        throw new Error(data.message || 'Failed to create booking.');\n      }\n      alert('Booking successful!');\n      navigate('/dashboard'); // Or to a \"My Bookings\" page\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-message\",\n    children: \"Loading booking calendar...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"booking-page\",\n    children: [listing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booking-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Book: \", listing.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"with \", listing.provider_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"booking-subtitle\",\n      children: \"Select an available time slot below.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slots-container\",\n      children: slots.length > 0 ? slots.map(slot => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `slot-btn ${selectedSlot === slot ? 'selected' : ''}`,\n        onClick: () => setSelectedSlot(slot),\n        children: formatDate(slot)\n      }, slot, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No available slots in the next 7 days.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"form-button\",\n      onClick: handleBooking,\n      disabled: !selectedSlot,\n      children: \"Confirm Booking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(BookingPage, \"Z1972IM5zp2jlEB3+bFBodSgUKQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = BookingPage;\nexport default BookingPage;\nvar _c;\n$RefreshReg$(_c, \"BookingPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","BookingPage","_s","listingId","listing","setListing","slots","setSlots","selectedSlot","setSelectedSlot","error","setError","loading","setLoading","navigate","fetchListingDetails","res","fetch","ok","Error","data","json","err","message","provider_id","fetchSlots","handleBooking","token","localStorage","getItem","method","headers","body","JSON","stringify","listing_id","id","booking_time","alert","formatDate","dateString","date","Date","toLocaleString","weekday","month","day","hour","minute","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","provider_name","length","map","slot","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/LocalizedServiceDiscovery/front-end/src/BookingPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './BookingPage.css';\r\n\r\nconst BookingPage = () => {\r\n    const { listingId } = useParams();\r\n    const [listing, setListing] = useState(null);\r\n    const [slots, setSlots] = useState([]);\r\n    const [selectedSlot, setSelectedSlot] = useState(null);\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    // Step 1: Fetch the details of the specific listing\r\n    useEffect(() => {\r\n        const fetchListingDetails = async () => {\r\n            try {\r\n                const res = await fetch(`http://localhost:5000/api/listings/${listingId}`);\r\n                if (!res.ok) throw new Error('Could not find this service listing.');\r\n                const data = await res.json();\r\n                setListing(data);\r\n            } catch (err) {\r\n                setError(err.message);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchListingDetails();\r\n    }, [listingId]);\r\n\r\n    // Step 2: Once we have the listing details, fetch the provider's available slots\r\n    useEffect(() => {\r\n        if (listing && listing.provider_id) {\r\n            const fetchSlots = async () => {\r\n                try {\r\n                    const res = await fetch(`http://localhost:5000/api/bookings/slots/${listing.provider_id}`);\r\n                    if (!res.ok) throw new Error('Failed to fetch available slots.');\r\n                    const data = await res.json();\r\n                    setSlots(data);\r\n                } catch (err) {\r\n                    setError(err.message);\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            };\r\n            fetchSlots();\r\n        }\r\n    }, [listing]); // This effect runs when the 'listing' state changes\r\n\r\n    const handleBooking = async () => {\r\n        if (!selectedSlot) return setError(\"Please select a time slot to continue.\");\r\n        \r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            // Redirect to login if user is not authenticated\r\n            return navigate('/login');\r\n        }\r\n\r\n        try {\r\n            const res = await fetch('http://localhost:5000/api/bookings/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({\r\n                    provider_id: listing.provider_id,\r\n                    listing_id: listing.id,\r\n                    booking_time: selectedSlot\r\n                })\r\n            });\r\n\r\n            if (!res.ok) {\r\n                const data = await res.json();\r\n                throw new Error(data.message || 'Failed to create booking.');\r\n            }\r\n            \r\n            alert('Booking successful!');\r\n            navigate('/dashboard'); // Or to a \"My Bookings\" page\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n    \r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        return date.toLocaleString('en-US', { weekday: 'long', month: 'long', day: 'numeric', hour: 'numeric', minute: '2-digit' });\r\n    };\r\n\r\n    if (loading) return <div className=\"loading-message\">Loading booking calendar...</div>;\r\n\r\n    return (\r\n        <div className=\"booking-page\">\r\n            {listing && (\r\n                <div className=\"booking-header\">\r\n                    <h2>Book: {listing.title}</h2>\r\n                    <p>with {listing.provider_name}</p>\r\n                </div>\r\n            )}\r\n            \r\n            <p className=\"booking-subtitle\">Select an available time slot below.</p>\r\n            \r\n            <div className=\"slots-container\">\r\n                {slots.length > 0 ? (\r\n                    slots.map(slot => (\r\n                        <button \r\n                            key={slot} \r\n                            className={`slot-btn ${selectedSlot === slot ? 'selected' : ''}`}\r\n                            onClick={() => setSelectedSlot(slot)}\r\n                        >\r\n                            {formatDate(slot)}\r\n                        </button>\r\n                    ))\r\n                ) : (\r\n                    <p>No available slots in the next 7 days.</p>\r\n                )}\r\n            </div>\r\n            \r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            \r\n            <button className=\"form-button\" onClick={handleBooking} disabled={!selectedSlot}>\r\n                Confirm Booking\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BookingPage;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}